{"id":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","dependencies":[{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\package.json","includedInParent":true,"mtime":1632222244289},{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\.browserslistrc","includedInParent":true,"mtime":1631415276000},{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\package.json","includedInParent":true,"mtime":1630423452000},{"name":"crypto","loc":{"line":6,"column":41},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\email.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\crypto-browserify\\index.js"},{"name":"punycode","loc":{"line":7,"column":43},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\email.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\node-libs-browser\\node_modules\\punycode\\punycode.js"},{"name":"validator/lib/isEmail","loc":{"line":8,"column":42},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\email.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\validator\\lib\\isEmail.js"},{"name":"validator/lib/isFQDN","loc":{"line":9,"column":41},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\email.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\validator\\lib\\isFQDN.js"},{"name":"../errors","loc":{"line":10,"column":25},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\email.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\errors.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst punycode_1 = __importDefault(require(\"punycode\"));\nconst isEmail_1 = __importDefault(require(\"validator/lib/isEmail\"));\nconst isFQDN_1 = __importDefault(require(\"validator/lib/isFQDN\"));\nconst errors_1 = require(\"../errors\");\nclass Email {\n    constructor(email) {\n        if (email.address != null && !isEmail_1.default(email.address)) {\n            throw new errors_1.ArgumentError('`email.address` is an invalid email address');\n        }\n        if (email.domain != null && !isFQDN_1.default(email.domain)) {\n            throw new errors_1.ArgumentError('`email.domain` is an invalid domain');\n        }\n        if (email.address) {\n            if (email.hashAddress) {\n                this.address = crypto_1.default\n                    .createHash('md5')\n                    .update(this.cleanEmailAddress(email.address))\n                    .digest('hex');\n            }\n            else {\n                this.address = email.address;\n            }\n        }\n        this.domain = email.domain;\n        if (email.domain == null && email.address != null) {\n            this.domain = email.address.substring(email.address.indexOf('@') + 1);\n        }\n    }\n    cleanEmailAddress(address) {\n        address = address.trim().toLowerCase();\n        const atIndex = address.lastIndexOf('@');\n        let localPart = address.substring(0, atIndex);\n        let domain = address.substring(atIndex + 1);\n        domain = this.cleanDomain(domain);\n        const separator = domain === 'yahoo.com' ? '-' : '+';\n        const separatorIndex = localPart.indexOf(separator);\n        if (separatorIndex > 0) {\n            localPart = localPart.substring(0, separatorIndex);\n        }\n        return localPart + '@' + domain;\n    }\n    cleanDomain(domain) {\n        domain = punycode_1.default.toASCII(domain);\n        if (Email.typoDomains.hasOwnProperty(domain)) {\n            domain = Email.typoDomains[domain];\n        }\n        return domain;\n    }\n}\nexports.default = Email;\nEmail.typoDomains = {\n    '35gmai.com': 'gmail.com',\n    '636gmail.com': 'gmail.com',\n    'gamil.com': 'gmail.com',\n    'gmail.comu': 'gmail.com',\n    'gmial.com': 'gmail.com',\n    'gmil.com': 'gmail.com',\n    'yahoogmail.com': 'gmail.com',\n    'putlook.com': 'outlook.com',\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}}],"sources":{"../node_modules/@maxmind/minfraud-api-node/dist/src/request/email.js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst punycode_1 = __importDefault(require(\"punycode\"));\nconst isEmail_1 = __importDefault(require(\"validator/lib/isEmail\"));\nconst isFQDN_1 = __importDefault(require(\"validator/lib/isFQDN\"));\nconst errors_1 = require(\"../errors\");\nclass Email {\n    constructor(email) {\n        if (email.address != null && !isEmail_1.default(email.address)) {\n            throw new errors_1.ArgumentError('`email.address` is an invalid email address');\n        }\n        if (email.domain != null && !isFQDN_1.default(email.domain)) {\n            throw new errors_1.ArgumentError('`email.domain` is an invalid domain');\n        }\n        if (email.address) {\n            if (email.hashAddress) {\n                this.address = crypto_1.default\n                    .createHash('md5')\n                    .update(this.cleanEmailAddress(email.address))\n                    .digest('hex');\n            }\n            else {\n                this.address = email.address;\n            }\n        }\n        this.domain = email.domain;\n        if (email.domain == null && email.address != null) {\n            this.domain = email.address.substring(email.address.indexOf('@') + 1);\n        }\n    }\n    cleanEmailAddress(address) {\n        address = address.trim().toLowerCase();\n        const atIndex = address.lastIndexOf('@');\n        let localPart = address.substring(0, atIndex);\n        let domain = address.substring(atIndex + 1);\n        domain = this.cleanDomain(domain);\n        const separator = domain === 'yahoo.com' ? '-' : '+';\n        const separatorIndex = localPart.indexOf(separator);\n        if (separatorIndex > 0) {\n            localPart = localPart.substring(0, separatorIndex);\n        }\n        return localPart + '@' + domain;\n    }\n    cleanDomain(domain) {\n        domain = punycode_1.default.toASCII(domain);\n        if (Email.typoDomains.hasOwnProperty(domain)) {\n            domain = Email.typoDomains[domain];\n        }\n        return domain;\n    }\n}\nexports.default = Email;\nEmail.typoDomains = {\n    '35gmai.com': 'gmail.com',\n    '636gmail.com': 'gmail.com',\n    'gamil.com': 'gmail.com',\n    'gmail.comu': 'gmail.com',\n    'gmial.com': 'gmail.com',\n    'gmil.com': 'gmail.com',\n    'yahoogmail.com': 'gmail.com',\n    'putlook.com': 'outlook.com',\n};\n"},"lineCount":67}},"error":null,"hash":"ec9c6d9ecf39c5a8711e8cc7834cddda","cacheData":{"env":{}}}