{"id":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","dependencies":[{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\package.json","includedInParent":true,"mtime":1632222244289},{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\.browserslistrc","includedInParent":true,"mtime":1631415276000},{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\geoip2-node\\dist\\package.json","includedInParent":true,"mtime":1629230096000},{"name":"ip6addr","loc":{"line":3,"column":24},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\geoip2-node\\dist\\src\\readerModel.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\ip6addr\\ip6addr.js"},{"name":"lodash.set","loc":{"line":4,"column":20},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\geoip2-node\\dist\\src\\readerModel.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\lodash.set\\index.js"},{"name":"maxmind","loc":{"line":5,"column":21},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\geoip2-node\\dist\\src\\readerModel.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\maxmind\\lib\\index.js"},{"name":"./errors","loc":{"line":6,"column":25},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\geoip2-node\\dist\\src\\readerModel.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\geoip2-node\\dist\\src\\errors.js"},{"name":"./models","loc":{"line":7,"column":23},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\geoip2-node\\dist\\src\\readerModel.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\geoip2-node\\dist\\src\\models\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ip6addr = require(\"ip6addr\");\nconst set = require(\"lodash.set\");\nconst mmdb = require(\"maxmind\");\nconst errors_1 = require(\"./errors\");\nconst models = require(\"./models\");\nclass ReaderModel {\n    constructor(mmdbReader) {\n        this.mmdbReader = mmdbReader;\n    }\n    anonymousIP(ipAddress) {\n        return this.modelFor(models.AnonymousIP, 'GeoIP2-Anonymous-IP', ipAddress, 'anonymousIP()');\n    }\n    city(ipAddress) {\n        return this.modelFor(models.City, 'City', ipAddress, 'city()');\n    }\n    country(ipAddress) {\n        return this.modelFor(models.Country, 'Country', ipAddress, 'country()');\n    }\n    asn(ipAddress) {\n        return this.modelFor(models.Asn, 'ASN', ipAddress, 'asn()');\n    }\n    connectionType(ipAddress) {\n        return this.modelFor(models.ConnectionType, 'Connection-Type', ipAddress, 'connectionType()');\n    }\n    domain(ipAddress) {\n        return this.modelFor(models.Domain, 'Domain', ipAddress, 'domain()');\n    }\n    isp(ipAddress) {\n        return this.modelFor(models.Isp, 'ISP', ipAddress, 'isp()');\n    }\n    enterprise(ipAddress) {\n        return this.modelFor(models.Enterprise, 'Enterprise', ipAddress, 'enterprise()');\n    }\n    getRecord(dbType, ipAddress, fnName) {\n        const metaDbType = this.mmdbReader.metadata.databaseType;\n        if (!mmdb.validate(ipAddress)) {\n            throw new errors_1.ValueError(`${ipAddress} is invalid`);\n        }\n        if (!metaDbType.includes(dbType)) {\n            throw new errors_1.BadMethodCallError(`The ${fnName} method cannot be used with the ${metaDbType} database`);\n        }\n        let record;\n        let prefixLength;\n        [record, prefixLength] = this.mmdbReader.getWithPrefixLength(ipAddress);\n        if (!record) {\n            throw new errors_1.AddressNotFoundError(`The address ${ipAddress} is not in the database`);\n        }\n        return [record, ip6addr.createCIDR(ipAddress, prefixLength).toString()];\n    }\n    modelFor(modelClass, dbType, ipAddress, fnName) {\n        const [record, network] = this.getRecord(dbType, ipAddress, fnName);\n        const model = new modelClass(record);\n        switch (dbType) {\n            case 'ASN':\n            case 'Connection-Type':\n            case 'Domain':\n            case 'GeoIP2-Anonymous-IP':\n            case 'ISP':\n                set(model, 'ipAddress', ipAddress);\n                set(model, 'network', network);\n                break;\n            default:\n                set(model, 'traits.ipAddress', ipAddress);\n                set(model, 'traits.network', network);\n        }\n        return model;\n    }\n}\nexports.default = ReaderModel;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}}],"sources":{"../node_modules/@maxmind/geoip2-node/dist/src/readerModel.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ip6addr = require(\"ip6addr\");\nconst set = require(\"lodash.set\");\nconst mmdb = require(\"maxmind\");\nconst errors_1 = require(\"./errors\");\nconst models = require(\"./models\");\nclass ReaderModel {\n    constructor(mmdbReader) {\n        this.mmdbReader = mmdbReader;\n    }\n    anonymousIP(ipAddress) {\n        return this.modelFor(models.AnonymousIP, 'GeoIP2-Anonymous-IP', ipAddress, 'anonymousIP()');\n    }\n    city(ipAddress) {\n        return this.modelFor(models.City, 'City', ipAddress, 'city()');\n    }\n    country(ipAddress) {\n        return this.modelFor(models.Country, 'Country', ipAddress, 'country()');\n    }\n    asn(ipAddress) {\n        return this.modelFor(models.Asn, 'ASN', ipAddress, 'asn()');\n    }\n    connectionType(ipAddress) {\n        return this.modelFor(models.ConnectionType, 'Connection-Type', ipAddress, 'connectionType()');\n    }\n    domain(ipAddress) {\n        return this.modelFor(models.Domain, 'Domain', ipAddress, 'domain()');\n    }\n    isp(ipAddress) {\n        return this.modelFor(models.Isp, 'ISP', ipAddress, 'isp()');\n    }\n    enterprise(ipAddress) {\n        return this.modelFor(models.Enterprise, 'Enterprise', ipAddress, 'enterprise()');\n    }\n    getRecord(dbType, ipAddress, fnName) {\n        const metaDbType = this.mmdbReader.metadata.databaseType;\n        if (!mmdb.validate(ipAddress)) {\n            throw new errors_1.ValueError(`${ipAddress} is invalid`);\n        }\n        if (!metaDbType.includes(dbType)) {\n            throw new errors_1.BadMethodCallError(`The ${fnName} method cannot be used with the ${metaDbType} database`);\n        }\n        let record;\n        let prefixLength;\n        [record, prefixLength] = this.mmdbReader.getWithPrefixLength(ipAddress);\n        if (!record) {\n            throw new errors_1.AddressNotFoundError(`The address ${ipAddress} is not in the database`);\n        }\n        return [record, ip6addr.createCIDR(ipAddress, prefixLength).toString()];\n    }\n    modelFor(modelClass, dbType, ipAddress, fnName) {\n        const [record, network] = this.getRecord(dbType, ipAddress, fnName);\n        const model = new modelClass(record);\n        switch (dbType) {\n            case 'ASN':\n            case 'Connection-Type':\n            case 'Domain':\n            case 'GeoIP2-Anonymous-IP':\n            case 'ISP':\n                set(model, 'ipAddress', ipAddress);\n                set(model, 'network', network);\n                break;\n            default:\n                set(model, 'traits.ipAddress', ipAddress);\n                set(model, 'traits.network', network);\n        }\n        return model;\n    }\n}\nexports.default = ReaderModel;\n"},"lineCount":72}},"error":null,"hash":"ff434bce5be3a746ac315c15ffd86cd4","cacheData":{"env":{}}}