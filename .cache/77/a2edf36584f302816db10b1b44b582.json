{"id":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","dependencies":[{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\package.json","includedInParent":true,"mtime":1632222244289},{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\.browserslistrc","includedInParent":true,"mtime":1631415276000},{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\package.json","includedInParent":true,"mtime":1630423452000},{"name":"net","loc":{"line":6,"column":22},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\transaction-report.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"snakecase-keys","loc":{"line":7,"column":49},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\transaction-report.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\snakecase-keys\\index.js"},{"name":"../constants","loc":{"line":8,"column":28},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\transaction-report.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\constants.js"},{"name":"../errors","loc":{"line":9,"column":25},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\transaction-report.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\errors.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst net_1 = require(\"net\");\nconst snakecase_keys_1 = __importDefault(require(\"snakecase-keys\"));\nconst constants_1 = require(\"../constants\");\nconst errors_1 = require(\"../errors\");\nclass TransactionReport {\n    constructor(transactionReport) {\n        if (net_1.isIP(transactionReport.ipAddress) === 0) {\n            throw new errors_1.ArgumentError('`transactionReport.ipAddress` is an invalid IP address');\n        }\n        if (!transactionReport.tag ||\n            !Object.values(constants_1.Tag).includes(transactionReport.tag)) {\n            throw new errors_1.ArgumentError(`\"${transactionReport.tag}\" is an invalid value for \"transactionReport.tag\"`);\n        }\n        this.ipAddress = transactionReport.ipAddress;\n        this.tag = transactionReport.tag;\n        Object.assign(this, transactionReport);\n    }\n    toString() {\n        return JSON.stringify(snakecase_keys_1.default(this));\n    }\n}\nexports.default = TransactionReport;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}}],"sources":{"../node_modules/@maxmind/minfraud-api-node/dist/src/request/transaction-report.js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst net_1 = require(\"net\");\nconst snakecase_keys_1 = __importDefault(require(\"snakecase-keys\"));\nconst constants_1 = require(\"../constants\");\nconst errors_1 = require(\"../errors\");\nclass TransactionReport {\n    constructor(transactionReport) {\n        if (net_1.isIP(transactionReport.ipAddress) === 0) {\n            throw new errors_1.ArgumentError('`transactionReport.ipAddress` is an invalid IP address');\n        }\n        if (!transactionReport.tag ||\n            !Object.values(constants_1.Tag).includes(transactionReport.tag)) {\n            throw new errors_1.ArgumentError(`\"${transactionReport.tag}\" is an invalid value for \"transactionReport.tag\"`);\n        }\n        this.ipAddress = transactionReport.ipAddress;\n        this.tag = transactionReport.tag;\n        Object.assign(this, transactionReport);\n    }\n    toString() {\n        return JSON.stringify(snakecase_keys_1.default(this));\n    }\n}\nexports.default = TransactionReport;\n"},"lineCount":28}},"error":null,"hash":"c0c97135b401121569ee1aeeee13fbf2","cacheData":{"env":{}}}