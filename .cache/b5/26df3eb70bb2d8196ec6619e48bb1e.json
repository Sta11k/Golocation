{"id":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","dependencies":[{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\package.json","includedInParent":true,"mtime":1632222244289},{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\.browserslistrc","includedInParent":true,"mtime":1631415276000},{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\package.json","includedInParent":true,"mtime":1630423452000},{"name":"net","loc":{"line":3,"column":22},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\device.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"../errors","loc":{"line":4,"column":25},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\device.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\errors.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst net_1 = require(\"net\");\nconst errors_1 = require(\"../errors\");\nclass Device {\n    constructor(device) {\n        if (device.ipAddress != null && net_1.isIP(device.ipAddress) === 0) {\n            throw new errors_1.ArgumentError('`device.ipAddress` is an invalid IP address');\n        }\n        Object.assign(this, device);\n    }\n}\nexports.default = Device;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}}],"sources":{"../node_modules/@maxmind/minfraud-api-node/dist/src/request/device.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst net_1 = require(\"net\");\nconst errors_1 = require(\"../errors\");\nclass Device {\n    constructor(device) {\n        if (device.ipAddress != null && net_1.isIP(device.ipAddress) === 0) {\n            throw new errors_1.ArgumentError('`device.ipAddress` is an invalid IP address');\n        }\n        Object.assign(this, device);\n    }\n}\nexports.default = Device;\n"},"lineCount":14}},"error":null,"hash":"196425e2681729cc87f5cdcb68f196da","cacheData":{"env":{}}}