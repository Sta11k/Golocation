{"id":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","dependencies":[{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\package.json","includedInParent":true,"mtime":1632222244289},{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\.browserslistrc","includedInParent":true,"mtime":1631415276000},{"name":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\package.json","includedInParent":true,"mtime":1630423452000},{"name":"../errors","loc":{"line":3,"column":25},"parent":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\request\\credit-card.js","resolved":"C:\\Users\\ClearSKY\\Documents\\GitHub\\goit-markup-hw-02\\Golocation\\node_modules\\@maxmind\\minfraud-api-node\\dist\\src\\errors.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"../errors\");\nconst singleChar = /^[A-Za-z0-9]$/;\nconst issuerIdNumberRegex = /^[0-9]{6}$/;\nconst last4Regex = /^[0-9]{4}$/;\nconst tokenRegex = /^(?![0-9]{1,19}$)[\\u0021-\\u007E]{1,255}$/;\nclass CreditCard {\n    constructor(creditCard) {\n        if (creditCard.avsResult != null &&\n            !singleChar.test(creditCard.avsResult)) {\n            throw new errors_1.ArgumentError(`avsResult should be a single character but we received: ${creditCard.avsResult}`);\n        }\n        if (creditCard.cvvResult != null &&\n            !singleChar.test(creditCard.cvvResult)) {\n            throw new errors_1.ArgumentError(`cvvResult should be a single character but we received: ${creditCard.cvvResult}`);\n        }\n        if (creditCard.issuerIdNumber != null &&\n            !issuerIdNumberRegex.test(creditCard.issuerIdNumber)) {\n            throw new errors_1.ArgumentError(`The issuer ID number (issuerIdNumber) ${creditCard.issuerIdNumber} is of the wrong format.`);\n        }\n        if (creditCard.last4digits != null &&\n            !last4Regex.test(creditCard.last4digits)) {\n            throw new errors_1.ArgumentError(`The last 4 credit card digits (last4digits) ${creditCard.last4digits} are of the wrong format.`);\n        }\n        if (creditCard.token != null && !tokenRegex.test(creditCard.token)) {\n            throw new errors_1.ArgumentError(`The credit card token (token) ${creditCard.token} was invalid. Tokens must be non-space ASCII printable characters. If the token consists of all digits, it must be more than 19 digits.`);\n        }\n        Object.assign(this, creditCard);\n    }\n}\nexports.default = CreditCard;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"../node_modules/@maxmind/minfraud-api-node/dist/src/request/credit-card.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"../errors\");\nconst singleChar = /^[A-Za-z0-9]$/;\nconst issuerIdNumberRegex = /^[0-9]{6}$/;\nconst last4Regex = /^[0-9]{4}$/;\nconst tokenRegex = /^(?![0-9]{1,19}$)[\\u0021-\\u007E]{1,255}$/;\nclass CreditCard {\n    constructor(creditCard) {\n        if (creditCard.avsResult != null &&\n            !singleChar.test(creditCard.avsResult)) {\n            throw new errors_1.ArgumentError(`avsResult should be a single character but we received: ${creditCard.avsResult}`);\n        }\n        if (creditCard.cvvResult != null &&\n            !singleChar.test(creditCard.cvvResult)) {\n            throw new errors_1.ArgumentError(`cvvResult should be a single character but we received: ${creditCard.cvvResult}`);\n        }\n        if (creditCard.issuerIdNumber != null &&\n            !issuerIdNumberRegex.test(creditCard.issuerIdNumber)) {\n            throw new errors_1.ArgumentError(`The issuer ID number (issuerIdNumber) ${creditCard.issuerIdNumber} is of the wrong format.`);\n        }\n        if (creditCard.last4digits != null &&\n            !last4Regex.test(creditCard.last4digits)) {\n            throw new errors_1.ArgumentError(`The last 4 credit card digits (last4digits) ${creditCard.last4digits} are of the wrong format.`);\n        }\n        if (creditCard.token != null && !tokenRegex.test(creditCard.token)) {\n            throw new errors_1.ArgumentError(`The credit card token (token) ${creditCard.token} was invalid. Tokens must be non-space ASCII printable characters. If the token consists of all digits, it must be more than 19 digits.`);\n        }\n        Object.assign(this, creditCard);\n    }\n}\nexports.default = CreditCard;\n"},"lineCount":33}},"error":null,"hash":"6f694f0ab5bfbafafc81dda4e2c444c0","cacheData":{"env":{}}}